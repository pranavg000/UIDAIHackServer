from django.db import models
from .choices import TRANSACTION_STATES

class AnonProfile(models.Model):
    uidToken = models.CharField(max_length=30, primary_key=True)    # UIDAI UID Token
    authToken = models.CharField(max_length=256)                        # Token for communication with client app
    deviceID = models.CharField(max_length=256, unique=True)                         # For FCM
    publicKey = models.CharField(max_length=1024)
    shareableCode = models.CharField(max_length=1024, unique=True)

    def __str__(self):
        return 'AnonProfile:' + self.uidToken

# Dummy table for testing purposes. Will delete in final build
class OTPAPISim(models.Model):
    transactionNo = models.CharField(max_length=12, unique=True)
    uid = models.CharField(max_length=12, primary_key=True)
    uidToken = models.CharField(max_length=32, unique=True)


class Ekyc(models.Model):
    ekycFile = models.FileField(upload_to='')   # Encrypted by passcode
    encPassCode = models.IntegerField()         # Encrypted by public key


class Transaction(models.Model):
    # TransactionID - Autogenerated primary key

    # Not allowing deletion of a profile if transaction has an entry
    requester = models.ForeignKey(AnonProfile, related_name='requester', on_delete=models.RESTRICT)
    lender = models.ForeignKey(AnonProfile, related_name='lender', on_delete=models.RESTRICT)
    timestamp = models.DateTimeField(auto_now_add=True)     # Start time of the transaction
    state = models.CharField(
		max_length=10,
        choices=TRANSACTION_STATES,
        default='init',
	)


class Notifications(models.Model):
    receiver = models.ForeignKey(AnonProfile, related_name='notifReceiver', on_delete=models.CASCADE)
    messageTitle = models.CharField(max_length=64)
    messageBody = models.CharField(max_length=512)
    timestamp = models.DateTimeField(auto_now_add=True)



class OfflineEKYC(models.Model):
    transactionId = models.CharField(max_length=64, primary_key=True)
    encryptedEKYC = models.TextField(blank=False, null=False)
    encryptedPasscode = models.TextField(blank=False, null=False)
    filename = models.CharField(max_length=50)











